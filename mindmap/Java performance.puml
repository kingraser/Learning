@startmindmap
*[#orange] Java性能调优实战
    *[#pink] 1开篇词 | 怎样才能做好性能调优
        *[#lightblue]_ 扎实的计算机基础
        *[#lightblue]_ 习惯透过源码了解技术本质
        *[#lightblue]_ 善于追问和总结
    *[#pink] 2概述
        *[#lightblue] 如何制定性能调优标准
            *[#lightgreen] 为什么要做系统调优
                *_ 解决性能问题
            *[#lightgreen] 什么时候开始介入调优
                *_ 项目开始时不必介入
                *_ 开发时有效编码
                *_ 完成时性能测试
                *_ 上线后监控
            *[#lightgreen] 资源
                *_ CPU
                *_ 内存
                *_ 磁盘IO
                *_ 网络
                *_ 异常
                *_ 数据库
                *_ 锁竞争
            *[#lightgreen] 性能指标
                *[#lightgrey] 响应时间
                    *_ 客户端响应时间
                    *_ 网络响应时间
                    *_ 服务端响应时间
                    *_ 数据库响应时间
                *[#lightgrey] 吞吐量TPS
                    *[#lightyellow] 磁盘吞吐量
                        *_ (IOPS)Input/Output Per second(随机读写能力)
                        *_ 数据吞吐量(连续读写能力,视频网站)
                    *[#lightyellow] 网络吞吐量
                        *_ 带宽
                        *_ CPU处理能力
                        *_ 网卡
                        *_ 防火墙
                        *_ 外部接口
                        *_ IO
                *[#lightgrey] 计算机资源分配使用率(木桶短板效应)
                    *_ CPU占有率(Top命令)
                    *_ 内存使用率
                    *_ 磁盘IO
                    *_ 网络IO
                *[#lightgrey] 负载承受能力
                    *_ 随请求数上升,响应时间上升曲线
                    *_ 大量报错
                *[#lightgrey] 延伸
                    *[#lightyellow] 系统负载和CPU占有率的区别
                        *_ 系统负载代表单位时间内正在运行或等待的进程或线程数，代表了系统的繁忙程度\nCPU利用率则代表单位时间内一个线程或进程实时占用CPU的百分比\nIO密集型CPU占有率不高，负载高\nCPU密集型CPU占有率高，负载不高
                    *[#lightyellow] QPS与TPS
                        *_ 当一次用户操作只包含一个请求接口时，TPS和QPS没有区别。\n当用户的一次操作包含了多个服务请求时，TPS作为性能指标更具有代表性
                    *[#lightyellow] 如何避免异常生成堆栈信息
                        *_ 自定义异常继承RuntimeException\nRuntimeException构造函数有布尔参数writableStackTrace
        *[#lightblue] 如何制定性能调优策略
            *[#lightgreen] 测试
                *[#lightgrey] 微基准性能测试
                    *_ 针对单个接口/方法\n比如同步/异步实现
                *[#lightgrey] 宏基准性能测试
                    *_ 环境/场景/目标
            *[#lightgreen] 问题
                *_ 热身问题(JVM热点code优化)
                *[#lightgrey] 测试结果不稳定
                    *_ 网络波动/GC/其他进程\n多次测试取平均
                *_ 应该尽量避免线上环境中一台机器部署多个JVM 的情况
            *[#lightgreen] 性能测试结果
                *_ 测试接口的平均、最大和最小吞吐量，响应时间
                *_ 服务器的 CPU、内存、I/O、网络 IO 使用率
                *_ JVM 的 GC 频率
            *[#lightgreen] 根据结果调优
                *[#lightgrey] 系统有异常的情况
                    *_ CPU/内存/IO有异常\n查命令&查日志
                    *_ JVM有异常\n查GC日志&查内存快照
                *[#lightgrey] 系统无异常的情况
                    *_ 优化code
                    *_ 优化设计\neg:单例模式
                    *_ 优化算法
                    *_ 时间换空间
                    *_ 空间换时间
                    *_ 参数调优\neg:JVM参数设置
            *[#lightgreen] 兜底策略
                *_ 限流
                *_ 智能横向扩容
                *_ 提前扩容
    *[#pink] 4多线程性能调优
        *[#lightblue] synchronized优化
            *_ 字节码monitorenter/monitorexit来持有/释放monitor对象
            *_ monitor可以和对象一起创建/销毁,由c++ObjectMonitor实现
            *_ monitor由操作系统mutex lock实现互斥,会导致内核态/用户态切换,cost高
            *_ 对象实例在内存中的三部分:对象头/实例数据/对齐填充
            *_ 对象头由mark word/指向类的指针/数组长度三部分组成
            *[#lightgreen] mark word64bit
                *_ 无锁 56bit hashCode+1bit unused+4bit 分代年龄+1bit 是否偏向锁(0)+2bit锁标识位(01)
                *_ 偏向锁 54bit 线程ID+2bit Epoch+1bit unused+4bit 分代年龄+1bit 是否偏向锁(1)+2bit锁标识位(01)
                *_ 轻量级锁 62bit指向轻量级锁的指针+2bit锁标识位(00)
                *_ 重量级锁 62bit指向重量级锁的指针+2bit锁标识位(10)
                *_ GC标记 62bit空+2bit锁标识位(11)
            *_ 偏向锁优化同一线程多次申请同一个锁的竞争
            *_ 大量线程竞争同一资源会导致偏向锁频繁被撤销,可以通过调整JVM参数禁用偏向锁或使用重量级锁
            *_ 偏向锁竞争先用CAS获取锁,若失败升级为轻量级锁
            *_ 轻量级锁适合不存在长时间竞争的场景,可以调整JVM参数调整是否关闭自旋
            *_ 自旋尝试多次仍无法获取锁,升级到重量级锁,未抢到锁的线程会阻塞进入wait_set
            *_ 动态编译实现锁粗化/锁消除
            *_ 编码可以细化锁粒度
        *[#lightblue] Lock优化
            *_ 读写锁实现读写分离
            *_ StampedLock使用异或,不使用CAS,性能更好;但不支持重入,不支持条件变量,线程中断时可能导致CPU暴涨
        *[#lightblue] CAS
            *_ CPU通过总线锁定和缓存锁定保证原子性
            *_ 失败for循环,有CPU开销
        *[#lightblue] 上下文切换
            *_ vmstat/pidstat查看上下文切换
            *[#lightgreen] 减少上下文切换
                *_ 减少锁持有时间/降低锁粒度(锁分离/锁分段)/根据场景选择非阻塞乐观锁
                *_ 减少GC
                *_ 使用协程
                *_ 合理设置线程大小
                *_ 确认安全的情况使用notify而非notifyAll
        *[#lightblue] 并发容器
            *[#lightgreen] Map
                *_ HashTable 强一致场景
                *_ ConcurrentHashMap 1.7segment锁,1.8synchronized锁Entry实现;大部分场景都是弱一致情况下
                * 用ConcurrentSkipListMap处理大数据(千万级),存在大量删改操作
                    *_ 跳表 空间换时间
            *[#lightgreen] List
                *_ Vector 基于synchronized同步锁实现
                *_ CopyOnWriteArrayList 读无锁,写通过操作底层Array新副本实现
        *[#lightblue] 线程池大小
            *_ cpu密集型 CPU核数+1
            *_ IO密集型 CPU核数*(线程等待时间/线程运行时间+1);可以用VisualVM查看比例
            *_ 优化串行才是性能关键,并行优化有Amdahl定律:S=1/[(1-p)+p/N];S是加速比,p是可并行化的比例,N是并行资源数(例如CPU核数)
        *[#lightblue] 协程
            *_ N:1线程模型的缺点在于操作系统不能感知用户态的线程,因此容易造成某一个线程进行系统调用内核线程时被阻塞,从而导致整个进程被阻塞
            *_ go是N:M
            *_ Java21协程
            *_ 适合IO密集型
        *[#lightblue] 强弱一致性
            *_ Happens-Before原则 更多详见 java并发编程的mindMap
    *[#pink] 6设计模式调优
        *[#lightblue] 单例
            *_ 保证全局一个实例&只有一个全局访问点
            *[#lightgreen] 饿汉模式
                *_ 类初始化时创建实例
                *_ 优点:多线程下唯一;性能好
                *_ 缺点:占用内存
            *[#lightgreen] 懒汉模式
                * 实现方式
                    *_ 懒加载
                    *_ 同步锁
                    *_ 双重检查(加volatile)
                    *_ 内部类实现
        *[#lightblue] 原型(prototype)和享元(flyweight)模式
            *[#lightgreen] prototype模式
                *_ 实现cloneable接口;重写Object.clone()方法;重写中调用super.clone()
                *_ 深copy和浅copy
                *_ 适用重复创建对象场景,例如spring的bean管理
            *[#lightgreen] flyweight模式
                *_ Java的String和Integer
                *_ 线程池
        *[#lightblue] 设计模式优化并发
            *[#lightgreen] 线程上下文模式
                *_ Spring ApplicationContext
                *_ ThreadLocal
                *_ 传递或者隔离变量
            *[#lightgreen] Thread-per-message模式
                *_ 解决IO耗时的问题
                *_ 线程池
            *[#lightgreen] worker-thread模式
                *_ 减少线程的创建/销毁开销
        *[#lightblue] 生产者/消费者模式
            *[#lightgreen] 常见实现
                *_ Object wait/notify/notifyAll
                *_ Lock的Condition的await/signal/signalAll
                *_ BlockingQueue
            *[#lightgreen] 电商库存设计
                *_ 缓存库容
                *_ 消息队列
        *[#lightblue] 装饰器模式
            *_ 接口/基类/具体实现类
        *[#lightblue] 答疑
            *_ 单例:枚举实现/内部类实现
            *_ 生产者/消费者模式大流量下延迟高:1提高响应速度2限流拒绝
    *[#pink] 8实战演练
        *[#lightblue] 分布式锁
            *_ db
            *[#lightgreen] zookeeper
                * feature
                    *_ 节点:持久/临时;还能被标记有序性
                    *_ watch机制:特定事件触发,会通知watcher
                *_ 父节点(持久)下建立子节点,并标记有序性
                *_ 轮询判断,如果是最小节点则获得锁,操作完毕删除节点
                *_ 否则对上一个节点注册watcher
                * 优缺点
                    *_ 集群实现,避免单点
                    *_ 每次都能释放锁,因为服务挂了临时节点会因为连接断开而自动删除
                    *_ 性能比redis差
            *[#lightgreen] redis
                *_ SETNX+EXPIRE
                * 优缺点
                    *_ 性能好
                    *_ 集群模式,由于同步到各个节点是异步的,若master崩溃,新master上没有被同步到,则锁失效
                * redlock算法
                    *_ 集群模式下,超过一半节点成功&耗时小于lock_timeout则获得锁成功
        *[#lightblue] 分布式事务
            * XA规范
                *_ DTP模型:AP/RM/TM
                *_ 父节点(持久)下建立子节点,并标记有序性
            * 二/三阶段提交
                *_ prepare commit
                *_ 准备/预处理/提交或者回滚
            * TCC
                *_ try/confirm/cancel
                *_ 重试调用失败的confirm or cancel方法
            * Seata
                *_ TC/TM/RM
                *_ DTP模型:AP/RM/TM
                *_ DTP模型:AP/RM/TM
        *[#lightblue] 缓存
        *[#lightblue] 抢购
    *[#pink] 9结束语
left side
    *[#pink] 3Java编程性能调优
        *[#lightblue] String优化
            *[#lightgreen] 超大字符串
                *_ code中拼接会被compiler优化
                *_ 循环中使用StringBuilder/StringBuffer(线程安全)
            *[#lightgreen] String.intern节省空间
                *_ twitter地址信息
            *_ 慎用split方法\n可能导致回溯使CPU占用极高
        *[#lightblue] 慎重使用regular expression
            *_ 模式:贪婪/懒惰?/独占+(同贪婪,但匹配失败不回溯,直接报失败)
            *[#lightgrey] 优化
                *_ 少用贪婪，多用独占
                *_ 减少分支选择(比如让常用选项在前面,提取公共前缀)
                *_ 减少嵌套捕获,加prefix ?:
        *[#lightblue] List
            *_ always use ArrayList\n better initialize size
        *[#lightblue] Stream
            *_ 在并行处理操作中，Stream 对中间操作基本跟串行处理方式是一样的\n但在终结操作中，Stream 将结合 ForkJoin 框架对集合进行切片处理\nForkJoin 框架将每个切片的处理结果 Join 合并起来
        *[#lightblue] HashMap
            *[#lightgrey] 添加
                *_ hashCode 高16位与低16位异或,尽量打乱hashCode真正参与运算的低16位
                *_ (n-1)&hashCode
            *[#lightgrey] 获取
                *_ 链表转红黑树
            *[#lightgrey] 扩容
                *_ e.hash&oldCapacity结果0与其他分流;0在原位,其他在原Index+oldCapacity上
        *[#lightblue] IO模型
            *[#lightgreen] 传统IO问题
                *_ 多次内存复制
                *_ 阻塞
            *[#lightgreen] 优化
                *_ 使用Buffer优化读写流操作(基于block)
                *_ 使用DirectBuffer(非JVM物理内存)减少用户空间内存复制
                *_ MappedByteBuffer是通过本地类调用mmap进行文件内存映射的\nmap()系统调用方法会直接将文件从硬盘拷贝到用户空间
                *_ 避免阻塞:Channel/Selector
        *[#lightblue] 序列化
            *_ 避免使用java序列化:1无法跨语言;2不安全;3体积大;4性能不好
            *_ ProtoBuf:使用T(类型)L(长度)V(字段值)
            *[#lightgreen] 序列化会反射调用无参构造器,破坏单例模式
                *_ override readResolve方法,返回静态对象
                *_ 通过内部类实现,只在被访问的时候加载一次
        *[#lightblue] RPC通信协议
            *[#lightgreen] RMI(Remote Method Invocation)
                *_ java序列化
                *_ tcp短连接
                *_ 阻塞式IO
            *[#lightgreen] 高并发下RPC优化
                *_ 选择适合的通讯协议
                *_ 使用单一长连接
                *_ 优化socket通信
                *_ 量身定做报文格式
                *_ 编码/解码(如Protobuf/Json/Hessian)
                *_ 调整Linux的TCP参数设置选项
        *[#lightblue] 深入了解NIO的优化实现原理
            *[#lightgreen] IO模型
                *[#lightyellow] 阻塞
                    *_ connect阻塞 client端发起tcp连接请求
                    *_ accept阻塞 server端接收外来连接
                    *_ read/write阻塞 调用read()会阻塞线程
                *[#lightyellow] 非阻塞
                    *_ 使用fcntl可以把上述三个操作设置为非阻塞
                    *_ 没数据返回EWOULDBLOCK或EAGAIN错误,不会阻塞
                    *_ 调用read()会返回数据就绪/未就绪
                *[#lightyellow] 复用
                    *_ selector阻塞,channel非阻塞,用一个selector换多个channel
                    *_ select/poll/epoll,判断就绪与否在内核态,比起用户态的轮询判断,有性能优势
                    * select
                        *_ 调用select()会阻塞,直到返回或超时
                        * 劣势
                            *_ 1:bitmap默认大小1024,虽然可以调整,但是仍然有上限
                            *_ 2:rset(读文件描述符集合)被置位,不可重用,每次需要初始化
                            *_ 3:rset需要用户态copy到内核态,有开销
                            *_ 4:数组结构,需要O(n)再次遍历
                    * poll
                        *_ 类似select,但无劣势1&2
                    * epoll
                        *_ 无用户空间/内核空间copy fd
                        *_ 只返回就绪事件
                        *_ 使用红黑树而非数组,插入/删除有性能优势
                        *_ 比起poll,无劣势3&4
                *[#lightyellow] 信号驱动
                    *_ 用户进程发起一个IO请求,调用sigaction函数,给socket注册一个回调
                    *_ 内核数据就绪时,为该进程生成sigio信号
                    *_ 对tcp,信号驱动没有使用,因为tcp socket信号事件有7种,应用程序收到也无法区分
                    *_ udp只有一种数据请求事件,可以使用,NTP服务器就应用了该模型
                *[#lightyellow] 异步
                    *_ 信号驱动在等待数据就绪时没有阻塞,但在被通知后的IO操作是阻塞的
                    *_ aio_read会告知内核启动某个操作,内核完成操作后同志进程,操作包括等待数据就绪和数据从内核copy到用户空间
                    *_ linux不支持,windows支持,由于server大多是linux,所以主流中间件都不支持
            *[#lightgreen] 零copy
                *_ io device->内核空间->用户空间->内核空间->其他io设备
                *_ Linux内核中的mmap函数可以代替read、write的I/O读写操作,实现用户空间和内核空间共享一个缓存数据
            *[#lightgreen] 线程模型
                *_ 单线程reactor 所有操作都在一个nio线程上完成
                *_ 多线程reactor 一个线程监听连接请求事件,多个线程负责处理
                *_ 主从reactor 监听也是多线程
            *[#lightgreen] Tomcat参数
                *_ acceptorThreadCount 监听线程数,默认1
                *_ maxThreads 处理IO线程数,默认200
                *_ acceptCount 监听队列大小
                *_ maxConnections socket数,默认10000
    *[#pink] 5JVM性能监测及调优
        *[#lightblue] 内存模型
            *[#lightgreen] heap
                *_ 老年代 Tenured
                * 新生代
                    *_ Eden
                    *_ Survivor(From/To)
            * Method Area(Java8的MetaSpace)
                *_ 类信息
                *_ 线程共享
                *_ 本地内存,大小由操作系统控制,默认无上限,可以动态扩展
                *_ 有专门的垃圾收集器
            *_ Program Counter Register:各个线程字节码地址,分支/循环/跳转/异常/线程恢复
            *_ VM Stack:线程私有空间
            *_ Native Method Stack:管理本地方法,C实现
        *[#lightblue] JIT编译
            *[#lightgreen] 类
                * 类加载
                * 类链接:验证/准备(分配内存+初始值)/解析(符号饮用转直接引用)
                * 类初始化
            *[#lightgreen] JIT编辑
                *_ C1/C2:可以通过JVM参数配置
                *_ java9AOT运行前静态编译;java10Graal模块化维护
                *_ 计数器:调用计数/回边(Back Edge比如循环体)计数
            *[#lightgreen] 优化
                *_ 方法内联:方法不要太大/可以通过JVM参数配置/尽量使用final&private&static
                * 逃逸分析
                    *_ 栈上分配:如果一个变量只在方法中使用,就分配在栈上
                    *_ 锁消除:单线程访问,取消加减锁
                    *_ 标量替换:一个对象如果不被外部访问,实际可以直接创建内部标量
        *[#lightblue] GC
            *[#lightgreen] 回收范围
                *_ Heap
                *_ Method Area(MetaSpace)
            *[#lightgreen] 回收机制
                * 判断可否回收的算法
                    *_ 引用计数(corner case:循环引用)
                    *_ 可达性分析(目前JVM采用)
                    * 引用
                        *_ 强引用 被强引用不会被回收
                        *_ 软引用 即将OOM会回收
                        *_ 弱引用 GC即回收
                        *_ 虚引用 被回收时收到系统通知回收堆外内存
                * 回收特性
                    *_ 自动性
                    *_ 不可预测性
            *[#lightgreen] 算法
                *_ 标记清除:优点不需移动;缺点内存碎片
                *_ 复制算法:优点无内存碎片;缺点需要复制
                *_ 标记整理:优点集合上面两种;缺点需要移动局部对象
                *_ 分代收集:对于长时间存活对象效果不明显甚至反作用
            *[#lightgreen] 性能衡量指标
                *_ 吞吐量
                *_ 停顿时间
                *_ GC频率
            *[#lightgreen] 查看/分析GC日志
                *_ JVM参数设置
                *_ 工具分析相关log
            *[#lightgreen] 调优策略
                * 降低MinorGC
                    *_ 可以扩大Eden大小
                    *_ GC时间=扫描新生代(T1)+复制存活对象(T2);复制成本高于扫描成本
                    *_ 通常MinorGC的时间取决于GC后存活对象的数量,而不是Eden区大小
                * 降低FullGC
                    *_ 尽量避免大对象
                    *_ 增大内存
                * 选择合适Collector
                    *_ Serial New/Serial Old:复制/标记-整理
                    *_ Parallel New/Parallel Old:复制/标记-整理
                    *_ Parallel Scavenge:复制
                    *_ CMS:标记清理
                    *_ G1:标记整理+复制
        *[#lightblue] 优化内存分配
            *_ AB压测,查看指标
                *_ GC频率
                *_ 内存
                *_ 吞吐量
                *_ GC耗时
            * 分析GC日志
            *_ 用jmap查看堆内存分布
            *_ 可以通过JVM参数配置:如新生代大小,Eden比例
        *[#lightblue] 内存持续上升,如何排查
            *[#lightgreen] linux命令行
                *_ top
                *_ vmstat
                *_ pidstat
            *[#lightgreen] JDK工具
                *_ jstack 查看线程堆栈(常用来排查死锁)
                *_ jmap
                *_ jstat
            *[#lightgreen] 内存泄漏排查流程
                *_ 通过HeapDumpOnOutOfMemoryError和HeapDumpPath这两个参数开启堆内存异常日志
                *_ 通过日志定位OOM,通过top查看(进程/线程)的内存使用情况
                *_ jstack pid查看堆栈信息
                *_ jmap 查看堆内存 发现老年代满了,且不释放
                *_ jmap dump
                *_ 用分析工具,按占用空间排序
                *_ with incomming reference 查看引用对象
        *[#lightblue] 热点问题
            *[#lightgreen] CMS(已经被弃用)
                * init mark
                    *_ stw
                    *_ 触发young GC,并后续利用young GC的Card Table结果
                    *_ 找到老年代指向年轻代的引用,这些引用的card标记dirty
                    *_ 时间短,因为只扫描可直达活对象(实际是可直达老年代+年轻代存活对象,因为年轻代存活对象也是GC root)
                * concurrent mark
                    *_ GC线程和应用线程同时
                    *_ 遍历老年代,找出所有可达活对象
                    *_ 由于并行,程序可能在修改对象引用
                    *_ 若已标记存活变成垃圾,没问题,下次清理
                    *_ 若新的存活对象没有被标记可达,大问题,在下次stw阶段解决
                    *_ 用card table记录引用更新,为下两个阶段提供信息
                * concurrent preclean:
                    *_ 重扫card table标记为dirty的,找出新产生的,可能被遗漏的存活对象
                    *_ 目标减少下次stw时间,可能会多次执行
                *[#lightyellow] concurrent abortable preclean
                    * 重点在可中断,在下面情况中断
                        *_ 执行时间达到阈值
                        *_ dirty card工作量降到某阈值以下
                        * 等到了一次youngGC
                            *_ youngGC stw,减少dirty card数量
                            *_ youngGC 清理了年轻代,减少final remark的工作量
                    *_ 不是强制的,比如上一个阶段脏卡片已经处理完,或者系统认为没必要,可能会被跳过活很快结束.
                * final remark
                    *_ stw,且比init mark长很多
                * concurrent sweep
                    *_ 清理对象,回收空间
                    *_ 不移动活对象,有内存碎片问题
                * concurrent reset
                    *_ 恢复GC各种状态和数据结构
                    *_ 为下一次周期做准备
            *[#lightgreen] G1
                *_ Eden/Survivor/Old/Humongous(大对象,一旦不可达,在youngGC回收)
                *[#lightyellow] 停顿预测模型
                    *_ 用户设定期望停顿时间,默认200ms.
                    *_ 根据统计历史数据,预测一次回收的region数量
                    *_ 通过控制region数量达到控制停顿时间的目标
                *[#lightyellow] youngGC 完全stw
                    *_ 触发条件 Eden满了
                    * 流程
                        *_ Root Scanning
                        *_ Update Rset(RememberedSet) 处理老年代指向新生代的引用,避免全堆扫描
                        *_ Evacuation 存活迁至survivor,年龄达标迁至old
                        *_ 清理阶段 回收内存+处理软引用/弱引用/虚引用
                    * Rset
                        *_ 以region为单位,记录其他region引用本region对象的情况
                        *_ 定位跨代引用,避免全堆扫描
                        *_ 支持分区回收
                        *_ 并发标记只需扫描Rset的dirty card并非全堆
                        * 写屏障逻辑
                            *_ 当执行obj.field=target时
                            *_ if(target位于年轻代&&obj位于老年代)
                            *_ then car_index=address_to_card_index(obj); //计算obj所在卡片
                            *_ dirty_card(card_index);//标记卡片为脏
                        * 并发优化逻辑
                            *_ Refinement线程:异步处理脏卡片,更新对应RSet(通过-XX:G1ConcRefinementThreads控制线程数)
                            *_ 缓冲区机制:写屏障将脏卡片存入线程本地缓冲区,满后推送至全局队列,由Refinement线程消费
                *[#lightyellow] mixed GC
                    *_ 触发条件 老年区占用达到阈值,默认45%
                    * 流程
                        * concurrent marking
                            *_ initial mark stw 标记GC Roots直接引用(借道youngGC)
                            *_ Root Region Scanning 扫描survivor区到老年代的对象
                            *_ Concurrent Marking 遍历标记存活
                            *_ final remark stw完成剩余标记(处理SATB缓冲区)
                            *_ cleanup 统计分区垃圾比例,为mixed GC排序
                        * Evacuation stw 复制,优先回收垃圾占比高的老年区
                *[#lightyellow] fullGC
                    *_ 触发条件 晋升失败/分配失败/并发标记周期未完成
                    *_ 单线程;stw;压缩算法,整理碎片
                *[#lightyellow] SATB (Snapshot at the beginning)
                    *_ 三色标记法:黑色(根对象,或者对象和其子对象都被扫描),白色不可达,灰色(本身被扫描,但其子对象还未扫描)
                    *_ 问题:并发标记,如果一个对象被标记为不可达后,又被引用了,如何处理?
                    * 工作流程
                        *_ initial mark:stw,标记所有GC roots直接引用的对象(存活对象),此时堆的状态即为快照
                        *_ 并发标记: 遍历标记初始快照中的对象图;新分配的对象一律视为存活;写屏障记录:若一个对象引用被修改,标记旧值为待扫描
                        *_ final remark:stw,处理satb缓冲区,扫描并发阶段被覆盖的旧引用;重新扫描GC roots的增量变化
                    * 与incremental update(CMS)对比
                        *_ 标记目标:SATB标记开始时所有存活对象(快照);incremental update标记结束时所有存活对象(实时更新)
                        *_ 写屏障触发时机:SATB记录旧值,incremental update记录新值
                        *_ 漏标(Missed Marking本应存活的对象被判断为垃圾)风险:SATB无,快照对象必存活,incremental update有(若新引用未被扫描)
                        *_ 浮动垃圾:SATB多(新对象一律存活),incremental update少,新对象可以即时回收
                        *_ 重新标记开销:SATB低(仅处理被覆盖的旧引用),incremental update高(需扫描所有新增引用)
                        *_ 适合场景:SATB大堆、低延迟优先,incremental update中小堆,吞吐量优先
            *[#lightgreen] fullGC原因
                *_ 年轻代晋升老年代,老年代剩余空间不足
                *_ 老年代使用率超过阈值
                *_ 元空间(1.7永久代)不足
                *_ 调用System.gc()
            *[#lightgreen] ThreadLocal内存泄漏
                *_ ThreadLocal是基于ThreadLocalMap实现的,Entry的key使用了WeakReference封装
                *_ 弱引用类型若不可达,下次GC一定被回收,空间够也回收
                *_ key被回收后,存在引用链路:Thread->ThreadLocalMap->Entry->Value,所以value不会被回收,导致泄漏
                *_ 常见的case是线程池,这样线程生命周期长
                *_ 解决方式是手动remove
    *[#pink] 7数据库性能调优
        *[#lightblue] 如何写高性能SQL
            *[#lightgreen] 慢SQL
                *_ 无索引/索引失效
                *_ 锁等待
                *_ 不恰当的SQL
            *[#lightgreen] 优化步骤
                * 通过Explain分析SQL执行计划
                    *_ system>const>eq_ref>ref>range>index>all
                    *_ system>const表中只有一行匹配,根据索引查询一次即可
                    *_ eq_ref使用唯一索引
                    *_ ref非唯一索引/还可见于唯一索引最左原则匹配扫描
                    *_ range索引范围扫描
                    *_ index索引全表扫描
                    *_ all全表扫描
                *_ 通过show profile分析SQL执行性能
            *[#lightgreen] 常见优化
                *_ 优化分页查询 limit应该用id排序
                *_ 优化select count(*) 超级大表可用近似值/或另行加入统计表
                *_ 优化select * 应该尽量缩减字段用上索引
        *[#lightblue] 高并发事务调优
            *[#lightgreen] 并发事务带来的问题
                *_ 数据丢失
                *_ 脏读
                *_ 不可重复读
                *_ 幻读
            *[#lightgreen] 隔离级别
                *_ read uncommitted 脏读/不可重复读/幻读
                *_ read committed 不可重复读/幻读
                *_ repeatable read 幻读
                *_ serializable
            *[#lightgreen] 优化
                *_ 结合业务场景降低隔离级别
                *_ 避免行锁升级为表锁(行锁基于索引,无索引会导致表锁)
                *_ 控制事务大小,减少锁定资源量和锁定时长
        *[#lightblue] 索引失效/优化
            *_ 覆盖索引优化查询
            *_ 自增主键优化插入/查询
            *_ 前缀索引优化(缩减索引大小,但order by无法使用前缀索引)
            *[#lightgreen] 防止索引失效
                *_ 比如%开头的查询,最左匹配原则
                *_ or有一个条件没有索引,则涉及的索引都不会被用到
        *[#lightblue] 如何避免死锁
            *[#lightgreen] 避免死锁的措施
                *_ 编程中按照固定顺序处理记录
                *_ 允许幻读和不可重复读的情况下,使用RC作为隔离级别,避免gap lock导致的死锁
                *_ 更新表尽量使用主键更新
                *_ 避免长事务
                *_ 设置锁等待超时参数
        *[#lightblue] 何时分库分表
            *_ 单表查询性能受B+数树高影响
            *[#lightgreen] 优化
                *_ 分区:单库下分区数有限,适用于非海量数据的大表
                *_ NoSQL辅助:不支持事务
            *[#lightgreen] 何时分库分表
                *_ 首选分区
                *_ 单表数据量过大考虑分表
                *_ 大数据量/高并发场景考虑分库分表
            *[#lightgreen] 如何分库分表
                * 垂直
                    *_ 业务分库
                    *_ 字段拆表
                * 水平
                    *_ 某列做为切分条件
                * 分级
                    *_ 单库单表
                    *_ 单库多表
                    *_ 多库多表
            *[#lightgreen] 分库分表的问题
                *_ 分布式事务
                *_ 跨节点join:冗余表冗余字段
                *_ 跨节点分页查询:ES/Solr
                *_ 全局主键ID:UUID/Redis/snowflake
                *_ 扩容:使用2的倍数
        *[#lightblue] 表优化案例
            *[#lightgreen] 核心业务
                * 商品
                    *_ 商品分类
                    *_ 信息管理
                    *_ 商品SKU
                * 购物车
                    *_ 离线
                    *_ 在线
                * 订单
                    *_ 状态
                    *_ 流程
                * 库存
                    *_ 库存交易
                    *_ 库存管理
                    *_ 仓区
                    *_ 实时库存
                    *_ 锁定库存
                    *_ 待退货库存
                    *_ 活动库存
                    *_ 库存状态
                * 促销
                    *_ 活动管理
                    *_ 交易管理
            *[#lightgreen] 业务难点
                *_ 商品表结构设计:公共表存公共信息/结合搜索引擎,详细信息放入键值对数据库
                *_ 购物车性能瓶颈:冷热数据思路,缓存预热
                *_ 订单表结构设计:分库分表/分页则大数据实现
                *_ 库存表性能瓶颈:缓存+分布式锁
                *_ 促销活动表设计:缓存+分布式锁
            *[#lightgreen] 总结
                *_ NoSQl替代RDB
                *_ 缓存提高并发
                *_ 考虑分库分表
                *_ 避免复杂join操作
            *_ 为什么不用外键:update数据要求顺序/手工更新麻烦/外键约束检查影响性能
        *[#lightblue] 库参数设置优化
            *[#lightgreen] query cache(5.7.20后默认关闭,8版本后完全取消)
                *_ have_query_cache 是否支持
                *_ query_cache_limit 默认1M,超过不会cache
                *_ query_cache_min_res_unit 最小内存大小,默认4k
                *_ query_cache_size cache大小
                *_ query_cache_type ON/OFF/DEMAND(query里使用SQL_CACHE/SQL_NO_CACHE来控制是否cache)
            *[#lightgreen] MyISAM
                * key_buffer_size 缓存索引块
                    * 太大也不好,占用过多内存,容易发生SWAP页交换
                        *_ SWAP分区在系统物理内存不够时,把内存中的一部分释放给当前程序使用
                        *_ 被释放空间来自长时间没有操作的程序,数据临时保存在SWAP分区
                        *_ 等程序要运行时,再从swap分区恢复保存的数据到内存中
                    *_ 计算缓存使用率公式,来判断设置是否合理
                    *_ 1-((key_blocks_unused*key_cache_block_size)/key_buffer_size)
            *[#lightgreen] InnoDB
                *_ innodb_buffer_pool_size 默认128M/推荐物理内存80%大小;命中率应该90%
                *_ innodb_buffer_pool_instances 建议大小不超过innodb_read_io_threads+innodb_write_io_threads之和
                * innodb_read_io_threads/innodb_write_io_threads
                    *_ 默认4,合计8
                    *_ 建议(innodb_read_io_threads+innodb_write_io_threads)=innodb_buffer_pool_instances
                    * 可以通过以下查询确定读写比例
                        *_ SHOW GLOBAL STATUS LIKE 'Com_select';//读取数量
                        *_ SHOW GLOBAL STATUS WHERE Variable_name IN ('Com_insert', 'Com_update', 'Com_replace', 'Com_delete');//写入数量
                *_ innodb_log_file_size redo-log大小,1GB左右,太大flush耗时长,恢复时间也长
                *_ innodb_log_buffer_size 默认8M
                *_ innodb_flush_log_at_trx_commit 落盘策略:0只写redo-log buffer;1事务每次提交;2只写page cache
            *_ max_connections 最大连接数,默认151
            *_ back_log tcp 连接请求排队等待栈,并发较大可以适当调大
            *_ thread_cache_size 线程池大小
        *[#lightblue] InnoDB
            *_ 内存
            *[#lightgreen] 后台线程
                *_ master cache数据刷盘,插入缓存,undo页回收
                *_ IO
                *_ purge 回收已经提交事务的undo log
                *_ pager cleaner 协助master刷新脏页
            *[#lightgreen] 存储文件
                * tablespace
                    *_ 默认为共享表空间,存储的文件即为共享表空间文件(ibdata1)
                    *_ 若参数innodb_file_per_table为1,则会将存储的数据、索引等信息单独存储在一个独占表空间文件(ibd)
                *_ segment 数据段/索引段/回滚段
                *_ extent 1M,每次一般申请4-5个
                *_ page 默认16K
                *_ row 最多单页16k/2-200=7992
            *_ redo-log工作原理 见MySQL的mindMap
            *_ lru淘汰策略 见MySQL的mindMap
    *[#pink] 加餐
        *[#lightblue] 推荐常用性能测试工具
            *[#lightgreen] ab(apache bench)
                *_ 适合单个接口测试
                *_ 简单实用
                *_ 扩展性较低,缺乏对整个业务流程测试的支持
            *[#lightgreen] Jmeter
                *_ 功能全,可扩展性高,易学易操作
                *_ 性能不稳定,高并发下通过页面实时观测结果集,容易导致页面卡死或崩溃
            *_ LoadRunner(商业版)
                *_ 基本包括Jmeter常用功能,支持ip欺骗
                *_ 专业稳定高效;但非开源且售价高
            *_ 阿里云PTS
@endmindmap